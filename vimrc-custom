"insert word under cursor in ctrlp
"nmap <leader>lw :CtrlP<CR><C-\>w
fu CtrlPUnderCursor()
	let l:Command = expand("<cword>")
	call fzf#run({'sink': 'e','options': '-q '.l:Command })
endfu 
nmap <leader>lw :call CtrlPUnderCursor()<CR>


" Open files in fzf
nnoremap <silent> <C-p> :call fzf#run({'sink': 'e', 'options':'--prompt "files> " ' })<CR>

" Open git status files in fzf
function! s:gitstatusopen(line)
	execute 'edit' split(a:line, " ")[1]
endfunction
nnoremap <silent> <C-u> :call fzf#run({
	\'sink': function('<sid>gitstatusopen'),
	\'source':'git -c color.status=always status --short',
	\'options':'--ansi'}
	\)<CR>

" Open MRU in fzf
command! FZFMru call fzf#run({
            \'source': v:oldfiles,
            \'sink' : 'e',
            \'options' : '-m --prompt "recent> "',
            \})
nnoremap <silent> <C-o> :FZFMru<CR>

command! -nargs=1 Locate call fzf#run(
      \ {'source': 'locate <q-args>', 'sink': 'e', 'options': '-m'})


"copy file path
nnoremap <silent> <Leader>cp :let @+=expand("%:p")<CR>


" neovim natively support system clipboard
set clipboard+=unnamedplus

" normal keyword completion with ,,
inoremap <leader>, <C-x><C-n>

" map ctrl+s to save and run sync_server
noremap <C-S> :call TermCloseIfOK("sync_server")<CR>

"; i command mode ger ; i slutet på raden
noremap ; :s/\([^;]\)$/\1;/<cr>:set nohlsearch<cr>

"jira
map <unique> <leader>oj :<C-U>call JiraOpen()<cr><cr>

"session
map <F2> :mksession! ~/.vim_session <cr> " Quick write session with F2
map <F3> :source ~/.vim_session <cr>     " And load session with F3


"git
map <Leader>gs :Gstatus<CR>
map <Leader>gb :Gblame<CR>

" ctrl+a to quit current buffer
nnoremap <silent> <C-a> :bd<CR>

"pretty json
:command JsonPretty :%!python -m json.tool
" pretty xml
command XmlPretty :%!xmllint --format -

nnoremap <Leader>re :%s/\<<C-r><C-w>\>//g<Left><Left>

vmap v <Plug>(expand_region_expand)
vmap <C-v> <Plug>(expand_region_shrink)

let g:vdebug_features = {
\    'max_data': 100000,
\}

"			'/home/jonaz/git/fortnox': '/home/jonaz/git/fortnox',
"			'/storage/vol3/fortnox-jf': '/home/jonaz/git/fortnox',
let g:vdebug_options = {
\       "path_maps": {
\			'/home/jonaz/git/fortnox': '/home/jonaz/git/fortnox',
\			'/storage/vol3/fortnox-jf': '/home/jonaz/git/fortnox'
\		},
\       "server": '0.0.0.0',
\       "ide_key" : 'jf',
\       "break_on_open" : 0,
\       "continuous_mode" : 1,
\}

"special fix for autocompletion with Ultisnips and the TAB key
let g:ulti_expand_or_jump_res = 0
function! g:UltiSnips_Complete()
	call UltiSnips#ExpandSnippet()
	if g:ulti_expand_res == 0
		if pumvisible()
			return "\<C-n>"
		else
			call UltiSnips#JumpForwards()
			if g:ulti_jump_forwards_res == 0
			   return "\<TAB>"
			endif
		endif
	endif
	return ""
endfunction
au InsertEnter * exec "inoremap <silent> " . g:UltiSnipsExpandTrigger . " <C-R>=g:UltiSnips_Complete()<cr>"


let g:UltiSnipsEditSplit="vertical"
let g:snips_author='Jonas Falck'

"phpdoc templates
let g:pdv_template_dir = $HOME ."/vim_templates_snip"
"let g:pdv_template_dir = $HOME ."/.vim/bundle/pdv/templates_snip"
"nnoremap <C-k> :call pdv#DocumentCurrentLine()<CR>
nnoremap <C-k> :call pdv#DocumentWithSnip()<CR>


" this algorithm works well for /** */ style comments in a tab-indented file
let g:airline#extensions#whitespace#mixed_indent_algo = 1

"vim-go stuff
let g:go_fmt_command = "goimports"
let g:go_highlight_build_constraints = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_operators = 1
let g:go_highlight_structs = 1
let g:go_highlight_types = 1
" highlight variables and functions with same name
let g:go_auto_sameids = 1
let g:go_auto_type_info = 1
let g:go_addtags_transform = 'camelcase'
let g:go_gocode_unimported_packages = 1

" Open :GoDeclsDir with ctrl-g
nmap <C-g> :GoDeclsDir<cr>
imap <C-g> <esc>:<C-u>GoDeclsDir<cr>


map <Leader>gi :GoInstall<CR>
map <Leader>gl :GoLint<CR>
map <Leader>gr :GoRun<CR>

augroup go
  autocmd!

  " Show by default 4 spaces for a tab
  autocmd BufNewFile,BufRead *.go setlocal noexpandtab tabstop=4 shiftwidth=4

  " :GoBuild and :GoTestCompile
  autocmd FileType go nmap <leader>b :<C-u>call <SID>build_go_files()<CR>

  " :GoTest
  autocmd FileType go nmap <leader>gt  <Plug>(go-test)

  " :GoRun
  autocmd FileType go nmap <leader>r  <Plug>(go-run)

  " :GoDoc
  autocmd FileType go nmap <Leader>d <Plug>(go-doc)

  " :GoCoverageToggle
  autocmd FileType go nmap <Leader>c <Plug>(go-coverage-toggle)

  autocmd FileType go nmap <Leader>i <Plug>(go-install)

  " :GoDef but opens in a vertical split
  autocmd FileType go nmap <Leader>v <Plug>(go-def-vertical)
  " :GoDef but opens in a horizontal split
  autocmd FileType go nmap <Leader>s <Plug>(go-def-split)

  " :GoAlternate  commands :A, :AV, :AS and :AT
  autocmd Filetype go command! -bang A call go#alternate#Switch(<bang>0, 'edit')
  autocmd Filetype go command! -bang AV call go#alternate#Switch(<bang>0, 'vsplit')
  autocmd Filetype go command! -bang AS call go#alternate#Switch(<bang>0, 'split')
  autocmd Filetype go command! -bang AT call go#alternate#Switch(<bang>0, 'tabe')
augroup END

" build_go_files is a custom function that builds or compiles the test file.
" It calls :GoBuild if its a Go file, or :GoTestCompile if it's a test file
function! s:build_go_files()
  let l:file = expand('%')
  if l:file =~# '^\f\+_test\.go$'
    call go#test#Test(0, 1)
  elseif l:file =~# '^\f\+\.go$'
    call go#cmd#Build(0)
  endif
endfunction


" ale stuff
" Error and warning signs.
let g:ale_sign_error = '✘'
let g:ale_sign_warning = '⚠'
let g:airline#extensions#ale#enabled = 1
let g:ale_linters = {'go': ['go build', 'gometalinter']}
let g:ale_go_gometalinter_options = "--fast"
let g:ale_php_phpmd_ruleset = "~/.phpmd-ruleset.xml"


" deoplete stuff
inoremap <silent><expr> <TAB>
\ pumvisible() ? "\<C-n>" :
\ <SID>check_back_space() ? "\<TAB>" :
\ deoplete#mappings#manual_complete()
function! s:check_back_space() abort "{{{
	let col = col('.') - 1
	return !col || getline('.')[col - 1]  =~ '\s'
endfunction"}}}
inoremap <expr><S-TAB>  pumvisible() ? "\<C-p>" : "\<C-h>"


"jira

function! s:get_visual_selection()
  let [lnum1, col1] = getpos("'<")[1:2]
  let [lnum2, col2] = getpos("'>")[1:2]
  let lines = getline(lnum1, lnum2)
  let lines[-1] = lines[-1][: col2 - 1]
  let lines[0] = lines[0][col1 - 1:]
  return join(lines, "\n")
endfunction

" When cursor is over a jira ticket number, for example EXT-1234, launch
" browser to for ticket page.
function! JiraOpen()
  " Highlighting the number depends on where the cursor is.
  let char = getline(".")[col(".") - 1]
  if (matchstr(char,'-') != '')
    silent exe "normal e3bv3e\<Esc>"
  elseif (matchstr(char,'\d') != '')
    silent exe "normal e3bv3e\<Esc>"
  elseif (matchstr(char,'\w') != '')
    silent exe "normal ebv3e\<Esc>"
  else
    " Cursor not on a ticket.
    return 0
  endif
  let key = s:get_visual_selection()
  let cmd = ':!/usr/bin/google-chrome-stable jira/browse/' . key
  execute cmd
endfun

"terminal stuff
nmap <Leader>t :Topen<CR>

fun! FZFIsOpen()
    let running = filter(range(1, bufnr('$')), "bufname(v:val) =~# ';#FZF'")
	if len(running)
		return 1
	endif
	return 0
endfun
tnoremap <expr><esc> FZFIsOpen() ? "\<esc>" : "\<C-\>\<C-n>"

fun! TermCloseIfOK(cmd)
	let l:origin = exists('*win_getid') ? win_getid() : 0
	:split
	:enew
	let opts = {'suffix': ' # vim-test', 'origin': l:origin}
	let opts.new_window_id = exists('*win_getid') ? win_getid() : 0
	function! opts.on_exit(job_id, exit_code, event) dict
		if a:exit_code == 0
			call win_gotoid(self.new_window_id)
			close
		endif
	endfunction
	function! opts.on_stdout(job_id, data, event) dict
		if self.origin != 0
			call win_gotoid(self.origin)
		endif
	endfunction

	call termopen(a:cmd, opts)
endfun


fun! s:change_branch(e)
	let res = system("git checkout " . a:e)
	:e!
	:AirlineRefresh
	echom 'Changed branch to ' . a:e
endfun

command! Gbranch call fzf#run(
	\ {
	\ 'source': 'git branch -a --format "%(refname:short)" | sed "s#^origin/##" | sort | uniq',
	\ 'sink': function('<sid>change_branch'),
	\ 'options': '-m',
	\ 'down': '20%'
	\})

map <Leader>gc :Gbranch<CR>

nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>


" Startify stuff
let g:startify_files_number = 5
let g:startify_change_to_dir = 0
let g:startify_custom_header = [ ]
let g:startify_relative_path = 1
let g:startify_use_env = 1

function! s:list_commits()
	let git = 'git -C ' . getcwd()
	let commits = systemlist(git . ' log --oneline | head -n10')
	let git = 'G' . git[1:]
	return map(commits, '{"line": matchstr(v:val, "\\s\\zs.*"), "cmd": "'. git .' show ". matchstr(v:val, "^\\x\\+") }')
endfunction

" Custom startup list, only show MRU from current directory/project
let g:startify_lists = [
\  { 'type': 'dir',       'header': [ 'Files '. getcwd() ] },
\  { 'type': function('s:list_commits'), 'header': [ 'Recent Commits' ] },
\  { 'type': 'sessions',  'header': [ 'Sessions' ]       },
\  { 'type': 'commands',  'header': [ 'Commands' ]       },
\ ]

let g:startify_commands = [
\   { 'up': [ 'Update Plugins', ':PlugUpdate' ] },
\   { 'ug': [ 'Upgrade Plugin Manager', ':PlugUpgrade' ] },
\ ]

autocmd User Startified setlocal cursorline


function! s:line_handler(l)
  let keys = split(a:l, ':\t')
  exec 'buf' keys[0]
  exec keys[1]
  normal! ^zz
endfunction

function! s:buffer_lines()
  let res = []
  for b in filter(range(1, bufnr('$')), 'buflisted(v:val)')
    call extend(res, map(getbufline(b,0,"$"), 'b . ":\t" . (v:key + 1) . ":\t" . v:val '))
  endfor
  return res
endfunction

command! FZFLines call fzf#run({
\   'source':  <sid>buffer_lines(),
\   'sink':    function('<sid>line_handler'),
\   'options': '--extended --nth=3..',
\   'down':    '60%'
\})

nnoremap <silent> <C-l> :FZFLines<CR>


function! s:ag_to_qf(line)
  let parts = split(a:line, ':')
  return {'filename': parts[0], 'lnum': parts[1], 'col': parts[2],
        \ 'text': join(parts[3:], ':')}
endfunction

function! s:ag_handler(lines)
  if len(a:lines) < 2 | return | endif

  let cmd = get({'ctrl-x': 'split',
               \ 'ctrl-v': 'vertical split',
               \ 'ctrl-t': 'tabe'}, a:lines[0], 'e')
  let list = map(a:lines[1:], 's:ag_to_qf(v:val)')

  let first = list[0]
  execute cmd escape(first.filename, ' %#\')
  execute first.lnum
  execute 'normal!' first.col.'|zz'

  if len(list) > 1
    call setqflist(list)
    copen
    wincmd p
  endif
endfunction

command! -nargs=* Ag call fzf#run({
\ 'source':  printf('ag --nogroup --column --color "%s"',
\                   escape(empty(<q-args>) ? '^(?=.)' : <q-args>, '"\')),
\ 'sink*':    function('<sid>ag_handler'),
\ 'options': '-1 --ansi --expect=ctrl-t,ctrl-v,ctrl-x --delimiter : --nth 4.. '.
\            '--multi --bind=ctrl-a:select-all,ctrl-d:deselect-all '.
\            '--color hl:68,hl+:110',
\ 'down':    '50%'
\ })

