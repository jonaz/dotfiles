colorscheme solarized
let g:airline_theme="solarized"
"let g:solarized_termcolors=256

set shiftwidth=4
set softtabstop=4
set tabstop=4
inoremap  { <C-R>=MasVinge()<CR>
func MasVinge()
    let col = col('.') - 1
    if getline('.')[col - 1] == ')'
        return "{\<CR>}\<C-O>\O"
    endif
    return '{'
endfunc


" map space to toggle fold or create new one in visual mode
nnoremap <silent> <Space> @=(foldlevel('.')?'za':"\<Space>")<CR>
vnoremap <Space> zf

" map ctrl+s to save and run sync_server
noremap <C-S> :wa<CR>:silent !sync_server<CR>:redraw!<CR>

" for fortnox
"au FileType php noremap <F3> :set list!<CR>
"au FileType php set nolist
"au FileType php set noexpandtab

"au FileType javascript set nolist
"au FileType javascript set noexpandtab

set nolist
set noexpandtab


"let g:vdebug_features = {
"\    'max_depth': 100,
"\    'max_children': 512
"\}
"let g:vdebug_options['server'] = '0.0.0.0'
"let g:vdebug_options['path_maps'] = {'/storage/vol3/utv.fortnox.local/jf/trunk': '/home/jonaz/svn/trunk/'}
let g:vdebug_options = {
\       "path_maps": {'/storage/vol3/r34-jf': '/home/jonaz/svn/release-3.4','/storage/vol3/trunk-jf': '/home/jonaz/svn/trunk'},
\       "server": '0.0.0.0',
\       "ide_key" : 'jf',
\       "break_on_open" : 0,
\}


let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
let g:UltiSnipsEditSplit="vertical"
let g:snips_author='Jonas Falck'

"let g:UltiSnipsListSnippets = "<c-j>"

let g:ctrlp_max_files = 100000
let g:ctrlp_clear_cache_on_exit = 0

"phpdoc templates
let g:pdv_template_dir = $HOME ."/vim_templates_snip"
"let g:pdv_template_dir = $HOME ."/.vim/bundle/pdv/templates_snip"
"nnoremap <C-k> :call pdv#DocumentCurrentLine()<CR>
nnoremap <C-k> :call pdv#DocumentWithSnip()<CR>

"let g:syntastic_javascript_jshint_conf = "~/.jshintrc"
let g:syntastic_javascript_jshint_args = '--config ~/.jshintrc'
let g:syntastic_html_jshint_args = '--config ~/.jshintrc'
let g:syntastic_html_checkers = ['jshint']
"let g:syntastic_html_checkers = ['tidy','jshint']
"let g:syntastic_html_tidy_exec = 'tidy'

let g:syntastic_php_phpmd_post_args = "~/.phpmd-ruleset.xml"


" this algorithm works well for /** */ style comments in a tab-indented file
let g:airline#extensions#whitespace#mixed_indent_algo = 1


map <F2> :mksession! ~/.vim_session <cr> " Quick write session with F2
map <F3> :source ~/.vim_session <cr>     " And load session with F3

call pathogen#helptags()


map <Leader>gac :Gcommit -a -m ""<LEFT>
map <Leader>gc :Gcommit -m ""<LEFT>
map <Leader>gs :Gstatus<CR>
map <Leader>gb :Gblame<CR>

nnoremap <Leader>r :%s/\<<C-r><C-w>\>//g<Left><Left>

"jira

function! s:get_visual_selection()
  let [lnum1, col1] = getpos("'<")[1:2]
  let [lnum2, col2] = getpos("'>")[1:2]
  let lines = getline(lnum1, lnum2)
  let lines[-1] = lines[-1][: col2 - 1]
  let lines[0] = lines[0][col1 - 1:]
  return join(lines, "\n")
endfunction

" When cursor is over a jira ticket number, for example EXT-1234, launch
" browser to for ticket page.
function! JiraOpen()
  " Highlighting the number depends on where the cursor is.
  let char = getline(".")[col(".") - 1]
  if (matchstr(char,'-') != '')
    silent exe "normal e3bv3e\<Esc>"
  elseif (matchstr(char,'\d') != '')
    silent exe "normal e3bv3e\<Esc>"
  elseif (matchstr(char,'\w') != '')
    silent exe "normal ebv3e\<Esc>"
  else
    " Cursor not on a ticket.
    return 0
  endif
  let key = s:get_visual_selection()
  let cmd = ':!/usr/bin/google-chrome-stable jira/browse/' . key
  execute cmd
endfun

map <unique> <leader>oj :<C-U>call JiraOpen()<cr><cr>

"nmap <leader>lw :CtrlP<CR><C-\>w

"function! ReplaceIt()
	"call inputsave()
	"let replacement = input('Enter replacement:')
	"call inputrestore()
	"execute '%s/<C-r><C-w>/'.replacement.'/g'
"endfunction
"nnoremap <leader>r :call ReplaceIt()<cr>


