"insert word under cursor in ctrlp
"nmap <leader>lw :CtrlP<CR><C-\>w
fu CtrlPUnderCursor()
	let l:Command = expand("<cword>")
	call fzf#run({'sink': 'e','options': '-q '.l:Command })
endfu 
nmap <leader>lw :call CtrlPUnderCursor()<CR>


" Open files in fzf
nnoremap <silent> <C-p> :call fzf#run({
\   'sink': 'e' })<CR>

" Open MRU in fzf
command! FZFMru call fzf#run({
            \'source': v:oldfiles,
            \'sink' : 'e ',
            \'options' : '-m',
            \})
nnoremap <silent> <C-o> :FZFMru<CR>

command! -nargs=1 Locate call fzf#run(
      \ {'source': 'locate <q-args>', 'sink': 'e', 'options': '-m'})

inoremap  { <C-R>=MasVinge()<CR>

"copy file path
nnoremap <silent> <Leader>cp :let @+=expand("%:p")<CR>


" fortnox indentation
"au BufRead,BufNewFile /home/jonaz/svn/* setl sw=2 ts=2 sts=2 expandtab list listchars=tab:>-,trail:-

"system clipboard
vmap <Leader>y "+y
vmap <Leader>d "+d
nmap <Leader>p "+p
nmap <Leader>P "+P
vmap <Leader>p "+p
vmap <Leader>P "+P

" normal keyword completion with ,,
inoremap <leader>, <C-x><C-n>

" map space to toggle fold or create new one in visual mode
nnoremap <silent> <Space> @=(foldlevel('.')?'za':"\<Space>")<CR>
vnoremap <Space> zf

" map ctrl+s to save and run sync_server
noremap <C-S> :wa<CR>:silent !sync_server<CR>:redraw!<CR>

"; i command mode ger ; i slutet p√• raden
noremap ; :s/\([^;]\)$/\1;/<cr>:set nohlsearch<cr>

"jira
map <unique> <leader>oj :<C-U>call JiraOpen()<cr><cr>

"session
map <F2> :mksession! ~/.vim_session <cr> " Quick write session with F2
map <F3> :source ~/.vim_session <cr>     " And load session with F3

"tagbar
nmap <Leader>t :TagbarOpen fjc<CR>

"git
map <Leader>gs :Gstatus<CR>
map <Leader>gb :Gblame<CR>

"golang
map <Leader>gt :GoTest<CR>
map <Leader>gi :GoInstall<CR>
map <Leader>gl :GoLint<CR>
map <Leader>gr :GoRun<CR>

"pretty json
:command JsonPretty :%!python -m json.tool

nnoremap <Leader>r :%s/\<<C-r><C-w>\>//g<Left><Left>

vmap v <Plug>(expand_region_expand)
vmap <C-v> <Plug>(expand_region_shrink)

let g:vdebug_features = {
\    'max_data': 10000,
\}

let g:vdebug_options = {
\       "path_maps": {
\			'/storage/vol3/r214-jf': '/home/jonaz/svn/release-2.14',
\			'/storage/vol3/r34-jf': '/home/jonaz/svn/release-3.4',
\			'/storage/vol3/r35-jf': '/home/jonaz/svn/release-3.5',
\			'/storage/vol3/trunk-jf': '/home/jonaz/svn/trunk',
\			'/storage/vol3/fortnox-jf': '/home/jonaz/git/fortnox'
\		},
\       "server": '0.0.0.0',
\       "ide_key" : 'jf',
\       "break_on_open" : 0,
\}

"special fix for YouCompleteMe with Ultisnips and the TAB key
function! g:UltiSnips_Complete()
    call UltiSnips#ExpandSnippet()
    if g:ulti_expand_res == 0
        if pumvisible()
            return "\<C-n>"
        else
            call UltiSnips#JumpForwards()
            if g:ulti_jump_forwards_res == 0
               return "\<TAB>"
            endif
        endif
    endif
    return ""
endfunction

let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
let g:UltiSnipsListSnippets="<c-e>"
au InsertEnter * exec "inoremap <silent> " . g:UltiSnipsExpandTrigger . " <C-R>=g:UltiSnips_Complete()<cr>"
" this mapping Enter key to <C-y> to chose the current highlight item
" and close the selection list, same as other IDEs.
" CONFLICT with some plugins like tpope/Endwise
"inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

let g:UltiSnipsEditSplit="vertical"
let g:snips_author='Jonas Falck'

let g:ctrlp_max_files = 100000
let g:ctrlp_clear_cache_on_exit = 0
let g:ctrlp_regexp = 1
let g:ctrlp_lazy_update = 150

"phpdoc templates
let g:pdv_template_dir = $HOME ."/vim_templates_snip"
"let g:pdv_template_dir = $HOME ."/.vim/bundle/pdv/templates_snip"
"nnoremap <C-k> :call pdv#DocumentCurrentLine()<CR>
nnoremap <C-k> :call pdv#DocumentWithSnip()<CR>

"let g:syntastic_javascript_jshint_conf = "~/.jshintrc"
let g:syntastic_javascript_jshint_args = '--config ~/.jshintrc'
let g:syntastic_html_jshint_args = '--config ~/.jshintrc'
let g:syntastic_html_checkers = ['jshint']
"let g:syntastic_html_checkers = ['tidy','jshint']
"let g:syntastic_html_tidy_exec = 'tidy'

let g:syntastic_php_phpmd_post_args = "~/.phpmd-ruleset.xml"


" this algorithm works well for /** */ style comments in a tab-indented file
let g:airline#extensions#whitespace#mixed_indent_algo = 1

"vim-go stuff
let g:go_fmt_command = "goimports"

"jira

function! s:get_visual_selection()
  let [lnum1, col1] = getpos("'<")[1:2]
  let [lnum2, col2] = getpos("'>")[1:2]
  let lines = getline(lnum1, lnum2)
  let lines[-1] = lines[-1][: col2 - 1]
  let lines[0] = lines[0][col1 - 1:]
  return join(lines, "\n")
endfunction

" When cursor is over a jira ticket number, for example EXT-1234, launch
" browser to for ticket page.
function! JiraOpen()
  " Highlighting the number depends on where the cursor is.
  let char = getline(".")[col(".") - 1]
  if (matchstr(char,'-') != '')
    silent exe "normal e3bv3e\<Esc>"
  elseif (matchstr(char,'\d') != '')
    silent exe "normal e3bv3e\<Esc>"
  elseif (matchstr(char,'\w') != '')
    silent exe "normal ebv3e\<Esc>"
  else
    " Cursor not on a ticket.
    return 0
  endif
  let key = s:get_visual_selection()
  let cmd = ':!/usr/bin/google-chrome-stable jira/browse/' . key
  execute cmd
endfun


func MasVinge()
    let col = col('.') - 1
    if getline('.')[col - 1] == ')'
        return "{\<CR>}\<C-O>\O"
    endif
    return '{'
endfunc
